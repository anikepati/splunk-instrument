# splunk-handler.py

import logging
import os
from splunk_handler import SplunkHandler
from pythonjsonlogger import jsonlogger

# New imports for OTel
from opentelemetry import trace
from opentelemetry._logs import set_logger_provider
from opentelemetry.exporter.otlp.proto.grpc._log_exporter import OTLPLogExporter
from opentelemetry.sdk._logs import LoggerProvider, LoggingHandler
from opentelemetry.sdk._logs.export import BatchLogRecordProcessor
from opentelemetry.sdk.resources import Resource
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
from splunk_otel import start_tracing  # From splunk-opentelemetry (auto-configures)

class SplunkInstrumentor:
    """
    A class to encapsulate Splunk logging and OpenTelemetry instrumentation setup.
    Use the `instrument` method to configure everything.
    """
    
    def __init__(self):
        # Load config from environment variables in init (can be overridden if needed)
        self.splunk_host = os.getenv('SPLUNK_HOST', 'your-splunk-host.example.com')
        self.splunk_port = int(os.getenv('SPLUNK_PORT', 8088))
        self.splunk_token = os.getenv('SPLUNK_TOKEN', 'your-hec-token-here')
        self.splunk_index = os.getenv('SPLUNK_INDEX', 'cyber_ops')
        
        self.otel_service_name = os.getenv('OTEL_SERVICE_NAME', 'cyber_app')
        self.otel_resource_attributes = {
            "service.instance.id": "cyber_app_instance",
        }

    def instrument(self):
        """
        Configures Python logging with Splunk HEC and OpenTelemetry for full telemetry.
        Call this method once at application startup.
        """
        # Splunk HEC handler setup
        splunk_handler = SplunkHandler(
            host=self.splunk_host,
            port=self.splunk_port,
            token=self.splunk_token,
            index=self.splunk_index,
            sourcetype='_json',
            source='cyber_app',
            protocol='https',
            verify=True,
            flush_interval=2.0,
            queue_size=1000
        )

        # JSON formatter
        formatter = jsonlogger.JsonFormatter(
            '%(asctime)s %(name)s %(levelname)s %(message)s %(filename)s %(lineno)s %(process)d %(thread)d'
        )
        splunk_handler.setFormatter(formatter)

        # OTel resource
        resource = Resource.create(dict(self.otel_resource_attributes, **{
            "service.name": self.otel_service_name,
        }))

        # Tracing provider
        trace.set_tracer_provider(TracerProvider(resource=resource))
        span_exporter = OTLPSpanExporter()
        trace.get_tracer_provider().add_span_processor(BatchSpanProcessor(span_exporter))

        # Logging provider
        logger_provider = LoggerProvider(resource=resource)
        set_logger_provider(logger_provider)
        log_exporter = OTLPLogExporter()
        logger_provider.add_log_record_processor(BatchLogRecordProcessor(log_exporter))

        # OTel logging handler
        otel_handler = LoggingHandler(level=logging.DEBUG, logger_provider=logger_provider)

        # Configure root logger
        root_logger = logging.getLogger()
        root_logger.setLevel(logging.DEBUG)
        root_logger.addHandler(splunk_handler)  # HEC logs
        root_logger.addHandler(otel_handler)    # OTel telemetry

        # Optional console handler
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        root_logger.addHandler(console_handler)

        # Redirect print() to logging
        import sys
        class StdoutLogger:
            def write(self, message):
                message = message.strip()
                if message:
                    logging.getLogger('stdout').info(message)
            def flush(self):
                pass
        sys.stdout = StdoutLogger()
        sys.stderr = StdoutLogger()

        # Activate Splunk OTel auto-instrumentation
        start_tracing()

        logging.info("Splunk instrumentation complete: Logging and OpenTelemetry configured for real-time cybersecurity operations.")
